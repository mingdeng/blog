<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>明灯</title>
  <subtitle>信念的支架轰然倒塌，平静之后才发现面临的困境不是生活的磨难，而是要去寻找灵魂中的那一盏明灯。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mingdeng.github.io/blog/"/>
  <updated>2017-07-17T00:32:32.203Z</updated>
  <id>https://mingdeng.github.io/blog/</id>
  
  <author>
    <name>明灯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring MVC学习：session处理</title>
    <link href="https://mingdeng.github.io/blog/2017/07/13/Spring-MVC%E5%AD%A6%E4%B9%A0%EF%BC%9Asession%E5%A4%84%E7%90%86/"/>
    <id>https://mingdeng.github.io/blog/2017/07/13/Spring-MVC学习：session处理/</id>
    <published>2017-07-13T01:50:29.000Z</published>
    <updated>2017-07-17T00:32:32.203Z</updated>
    
    <content type="html"><![CDATA[<p>在web开发中，session的重要性不言而喻，与cookie相比，session更加安全，处于服务器端，开发者经常把一些重要的信息放在session，方便在多次请求中方便的获取信息，Spring MVC 对session的支持也依旧很强大很灵活。</p>
<p>Spring MVC对session的支持分为两种<br>基于HttpSession的天然支持<br>基于注解@SessionAttributes的灵活多变的支持</p>
<h3 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h3><p>首先我们先一起分析一下基于天生的HttpSession的支持吧<br>加入用户登录的时候，我们把用户信息记录到session中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.study.lyncc.web.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.study.lyncc.web.entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributesController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * user对象存入session</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/session/test/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">localsessionAttributes</span><span class="params">(@PathVariable Integer id,@PathVariable String name,HttpSession session)</span></span>&#123;</div><div class="line">        session.setAttribute(<span class="string">"currentUser"</span>, <span class="keyword">new</span> User(id,name));</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"session"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取session中的user对象</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/session/attributes"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">sessionAttributesage</span><span class="params">(HttpSession session)</span></span>&#123;</div><div class="line">        User u = (User)session.getAttribute(<span class="string">"currentUser"</span>);</div><div class="line">        System.out.println(u.getUsername());</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"session"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先请求<a href="http://localhost:8080/spring-mvc/session/test/1/lyncc" target="_blank" rel="external">http://localhost:8080/spring-mvc/session/test/1/lyncc</a><br>然后我们再次请求<a href="http://localhost:8080/spring-mvc/session/attributes" target="_blank" rel="external">http://localhost:8080/spring-mvc/session/attributes</a><br>会发现我们可以冲session取出我们上次请求存入session的user对象，并成功打印user的名字<br><img src="https://mingdeng.github.io/img/20160401164819289.png" alt=""></p>
<h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>基于@SessionAttributes注解实现的对session的管理<br>SessionAttributes是只能注解于类或者接口，@SessionAttributes的value代表我们需要把什么样的对象放入session，在我们的方法后当我们把对象放入ModelMap这个对象的时候，如果给出的key也会自动放入session的，我们举例说明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.study.lyncc.web.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.study.lyncc.web.entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@SessionAttributes</span>(value=<span class="string">"currentUser"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributesController</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/session/attributes/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">sessionAttributes</span><span class="params">(@PathVariable Integer id,@PathVariable String name)</span></span>&#123;</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"session"</span>);</div><div class="line">        mav.addObject(<span class="string">"currentUser"</span>, <span class="keyword">new</span> User(id,name));</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取session中的user对象</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/session/attributes"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">sessionAttributesage</span><span class="params">(HttpSession session)</span></span>&#123;</div><div class="line">        User u = (User)session.getAttribute(<span class="string">"currentUser"</span>);</div><div class="line">        System.out.println(u.getUsername());</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"session"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，我们注解了@SessionAttributes，并且在sessionAttributes方法中，mav.addObject(“currentUser”, new User(id,name));我们创建一个对象放入ModelAndView中，因为@SessionAttributes的value与addObject的key值相同，所以该User会自动存入session中（上面说是ModelMap对象，其实看源码就知道ModelAndView的model就是ModelMap）。<br><img src="https://mingdeng.github.io/img/20160401165710386.png" alt=""></p>
<p>為眾人抱薪者， 不可使其凍斃於風雪。<br>為自由開路者， 不可使其困頓於荊棘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在web开发中，session的重要性不言而喻，与cookie相比，session更加安全，处于服务器端，开发者经常把一些重要的信息放在session，方便在多次请求中方便的获取信息，Spring MVC 对session的支持也依旧很强大很灵活。&lt;/p&gt;
&lt;p&gt;Sprin
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://mingdeng.github.io/blog/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC学习：处理方法返回值的可选类型</title>
    <link href="https://mingdeng.github.io/blog/2017/07/13/Spring-MVC%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B/"/>
    <id>https://mingdeng.github.io/blog/2017/07/13/Spring-MVC学习：处理方法返回值的可选类型/</id>
    <published>2017-07-13T01:24:44.000Z</published>
    <updated>2017-07-13T02:33:10.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/show1"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/demo2/show"</span>);  </div><div class="line">    mav.addObject(<span class="string">"account"</span>, <span class="string">"account -1"</span>);  </div><div class="line">    <span class="keyword">return</span> mav;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过ModelAndView构造方法可以指定返回的页面名称，也可以通过setViewName()方法跳转到指定的页面 , 使用addObject()设置需要返回的值，addObject()有几个不同参数的方法，可以默认和指定返回对象的名字。 调用addObject()方法将值设置到一个名为ModelMap的类属性，ModelMap是LinkedHashMap的子类。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>指定返回的视图页面名称，结合设置的返回地址路径加上页面名称后缀即可访问到。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/welcome"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welcomeHandler</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="string">"center"</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的逻辑视图名为“center”，URL= prefix前缀+视图名称 +suffix后缀组成。<br>注意：如果方法声明了注解@ResponseBody ，则会直接将返回值输出到页面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/something"</span>, method = RequestMethod.GET)  </div><div class="line"><span class="meta">@ResponseBody</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span>  </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的结果会将文本”Hello World “直接写到http响应流。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ModelAndView&quot;&gt;&lt;a href=&quot;#ModelAndView&quot; class=&quot;headerlink&quot; title=&quot;ModelAndView&quot;&gt;&lt;/a&gt;ModelAndView&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://mingdeng.github.io/blog/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mingdeng.github.io/blog/2017/07/12/hello-world/"/>
    <id>https://mingdeng.github.io/blog/2017/07/12/hello-world/</id>
    <published>2017-07-12T06:14:55.550Z</published>
    <updated>2017-07-12T06:14:55.550Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
